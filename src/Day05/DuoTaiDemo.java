package Day05;
/*
 * 对象的多态性。
 * 
 * class 动物
 * ｛｝
 * class 猫 extends 动物
 * ｛｝
 * class 狗 extends 动物
 * ｛｝
 * 
 * 猫 x=new 猫（）；
 * 动物 x=new 猫（）；//一个对象。两种形态。
 * Animal a=new   Cat( ) 
//自动类型提升，猫对象提升了动物类型，但是特有功能无法访问。
//作用就是限制对特有功能的访问。
 //专业讲：向上转型。
 //如果还想用具体动物猫的特有功能。可以将对象向下转型。
  //Cat c =(Cat ) a;//向下转型的目的是为了使用子类中的特有方法。
 * 
 * 猫这类事物既具备着猫的形态，又具备着动物的形态。
 * 这就是对象的多态性。
 * 简单说：一个对象对应着不同类型，
 * 
 * 多态在代码中的体现：
 * 父类或者接口的引用指向其子类的对象。
 * 
 * 
 * 多态好处：
 * 	提高了代码的扩展性，前期定义的代码可以使用后期的内容。
 * 
 * 多态弊端：
 *  前期定义的内容不能使用（调用）后期子类的特有功能。
 *  
 *  多态的前提：
 *  1.必须有关系，继承，实现。
 *  2.要有覆盖。
 */

public class DuoTaiDemo {

	public static void main(String[] args) {
		// TODO 自动生成的方法存根
	
	}

}
